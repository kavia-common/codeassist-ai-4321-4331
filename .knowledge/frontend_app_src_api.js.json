{"is_source_file": true, "format": "JavaScript", "description": "This file contains helper functions for frontend-backend communication, including API request functions (postGenerate, postExplain, postDebug, getHealth), URL configuration, and runtime checks for mixed content warnings.", "external_files": ["fetch", "window", "process.env"], "external_methods": ["fetch"], "published": ["postGenerate", "postExplain", "postDebug", "getBaseUrl", "getHealth"], "classes": [], "methods": [{"name": "checkMixedContent(baseUrl)", "description": "Warns about potential mixed content issues if the frontend is HTTPS and the backend URL is HTTP.", "scope": "", "scopeKind": ""}, {"name": "postJSON(path, body)", "description": "Internal helper that performs a POST request with JSON payload, handles responses, and throws errors on failure.", "scope": "", "scopeKind": ""}, {"name": "postGenerate({ prompt, language, systemPrompt, model } = {})", "description": "Sends a generation request to the backend with prompt and parameters, returns generated content.", "scope": "", "scopeKind": ""}, {"name": "postExplain({ code, language, systemPrompt, model } = {})", "description": "Sends an explanation request for a code snippet to the backend.", "scope": "", "scopeKind": ""}, {"name": "postDebug({ code, language, error, systemPrompt, model } = {})", "description": "Posts debugging information including code and error details to the backend.", "scope": "", "scopeKind": ""}, {"name": "getBaseUrl()", "description": "Returns the backend base URL configured for the frontend application.", "scope": "", "scopeKind": ""}, {"name": "getHealth()", "description": "Performs a health check request to the backend to verify connectivity.", "scope": "", "scopeKind": ""}], "calls": ["checkMixedContent", "fetch"], "search-terms": ["POST /generate", "POST /explain", "POST /debug", "getHealth", "REACT_APP_BACKEND_BASE_URL"], "state": 2, "file_id": 13, "knowledge_revision": 53, "git_revision": "9cc49769a7cf23b6de3c0de28f0e797729a05756", "revision_history": [{"27": ""}, {"38": ""}, {"52": "9cc49769a7cf23b6de3c0de28f0e797729a05756"}, {"53": "9cc49769a7cf23b6de3c0de28f0e797729a05756"}], "ctags": [{"_type": "tag", "name": "BASE_URL", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^const BASE_URL =$/", "language": "JavaScript", "kind": "constant"}, {"_type": "tag", "name": "checkMixedContent", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^function checkMixedContent(baseUrl) {$/", "language": "JavaScript", "kind": "function", "signature": "(baseUrl)"}, {"_type": "tag", "name": "getBaseUrl", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^export function getBaseUrl() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "getHealth", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^export async function getHealth() {$/", "language": "JavaScript", "kind": "function", "signature": "()"}, {"_type": "tag", "name": "postDebug", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^export async function postDebug({ code, language, error, systemPrompt, model } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "({ code, language, error, systemPrompt, model } = {})"}, {"_type": "tag", "name": "postExplain", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^export async function postExplain({ code, language, systemPrompt, model } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "({ code, language, systemPrompt, model } = {})"}, {"_type": "tag", "name": "postGenerate", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^export async function postGenerate({ prompt, language, systemPrompt, model } = {}) {$/", "language": "JavaScript", "kind": "function", "signature": "({ prompt, language, systemPrompt, model } = {})"}, {"_type": "tag", "name": "postJSON", "path": "/home/kavia/workspace/code-generation/codeassist-ai-4321-4331/frontend_app/src/api.js", "pattern": "/^async function postJSON(path, body) {$/", "language": "JavaScript", "kind": "function", "signature": "(path, body)"}], "hash": "0334fb40b2d03f29c934e0776508496e", "format-version": 4, "code-base-name": "frontend_app", "filename": "frontend_app/src/api.js"}